Requirements:

1. JRE 1.7+.
2. JDK 1.7+ (only for building).
3. Maven (only for building).
4. JAVA_PATH should be set.

Special sauce:
1. Technologies used: Netty, Maven, SQLite, Hibernate.
2. Change statistics algorithms by simply implementing Statistics inteface and intantiating appropriate class in the main() method of HttpWettyServer class.
Examples: 
	- SimpleStatistics - store all stats in statistics db
	- NoStatics - no stats at all
	- NoSessionStatistics - store only active sessions stats
3. SQLite is not very good at handling the concurrent io db file operations, because there is only one db file.
So, all transactions run in syncronized mode to keep server alive.
4. Nothing has been mentioned about speed measuring formula, so basic one is used:
speed = ([cumulative channel session read bytes] + [cumulative channel session write bytes]) * 1000 / [cumulative channel session time, ms].
The speed is -1.0 in case [cumulative channel session time, sec] = 0.
Speed measuring formula could be easily overriden in extended class.
5. Automatic content compression is on for the service.
6. The standard Netty ChannelTrafficShapingHandler extension is used for traffic measuring.
7. No test are provided for building of the service.

Building:
1. mvn clean install.

Running:
1. put the statistics.db in the %wetty_folder%\resources\ folder.
2. run "java -jar wetty.jar".
3. open browser and visit "http://localhost:9090/status" page.

Shutting down server:
- either press Ctrl+C from terminal session or kill the corresponding javaw.exe process from task manager
